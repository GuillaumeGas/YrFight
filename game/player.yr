mod game.player;

import core.io;
import std.list;
import std.math;

import common.lib.sdl;
import common.resource;
import common.sprite.spritemanager;
import common.sprite.spritedrawable;
import common.sprite.spritesheet;
import common.drawable;

import game.collision;
import game.movement;

struct
| name : string
| body : SpriteDrawable
| speedX : i32
| speedY : i32
| isJumping : bool
| jumpsCount : i32
| linearMovement : LinearMovement
| parabolicMovement : ParabolicMovement
 -> Player;

private
{
    cte gHorizontalSpeed = 1;
    cte gVerticalSpeed = 1;
    cte gMaxJumpsCount = 2;
    cte img = "img/test.png";
    cte spriteId = "0";
}

def createPlayer (name : string, const posX : i32, const posY : i32) -> Player
{
    let spriteSheet = getSpriteSheetsManager ().getSpriteSheet (img);
    let body = (*spriteSheet).getSpriteDrawable(spriteId);
    let linearMovement = createLinearMovement (posX, posY);
    return Player { name, body, 0, 0, false, 0, linearMovement, ParabolicMovement::init };
}

def getDrawables (ref player : Player) -> mut List!(p!Drawable)
{
    let res = list!(p!Drawable) ();
    res.push (&(player.body.drawable));
    return res;
}

def jump (ref player : Player)
{
    if (player.jumpsCount < gMaxJumpsCount)
    {
        player.isJumping = true;
        if (player.speedX == 0)
            player.parabolicMovement.start (player.body.drawable.dstpos.x, player.body.drawable.dstpos.y, gVerticalSpeed, cast!f32 (Math::PI / 2));
        else
        {
            player.parabolicMovement.start (player.body.drawable.dstpos.x, player.body.drawable.dstpos.y, player.linearMovement.speedX, cast!f32 (Math::PI / 3));
        }
        player.jumpsCount++;
    }
}

def stopJumping (ref player : Player)
{
    player.isJumping = false;
    player.linearMovement.start (player.body.drawable.dstpos.x, player.body.drawable.dstpos.y);    
}

def fall (ref player : Player)
{
    let colManager = getCollisionManager ();
    if (colManager.canGoDown (player, gVerticalSpeed))
    {
        player.linearMovement.move (gVerticalSpeed, MoveDirection::Down);
    }
    else
    {
        player.jumpsCount = 0;
        player.linearMovement.stop (MoveDirection::Down);
    }
}

def goRight (ref player : Player)
{
    if (!player.isJumping)
    {
        let colManager = getCollisionManager ();
        if (colManager.canGoRight (player, gHorizontalSpeed))
            player.linearMovement.move (gHorizontalSpeed, MoveDirection::Right);
        else
            player.linearMovement.stop (MoveDirection::Right);
    }
    else 
    {
    //     if (player.speedX == 0)
    //     {
    //         player.parabolicMovement.horizontalForce += 0.1f;
    //     }
    //     else if (player.speedX < 0)
    //     {
    //         if (player.parabolicMovement.horizontalForce < 2)
    //             player.parabolicMovement.horizontalForce += 0.01f;
    //     }
    //     else if (player.speedX > 0)
    //     {
    //         if (player.parabolicMovement.horizontalForce > 0)
    //             player.parabolicMovement.horizontalForce -= 0.01f;
    //     }
    }
}

def goLeft (ref player : Player)
{
    if (!player.isJumping)
    {
        let colManager = getCollisionManager ();
        if (colManager.canGoLeft (player, gHorizontalSpeed))
            player.linearMovement.move (gHorizontalSpeed, MoveDirection::Left);
        else
            player.linearMovement.stop (MoveDirection::Left);
    }
    else
    {
        // if (player.speedX == 0)
        // {
        //     player.parabolicMovement.horizontalForce += 0.1f;
        // }
        // else if (player.speedX > 0)
        // {
        //     if (player.parabolicMovement.horizontalForce < 2)
        //         player.parabolicMovement.horizontalForce += 0.01f;
        // }
        // else if (player.speedX < 0)
        // {
        //     if (player.parabolicMovement.horizontalForce > 0)
        //         player.parabolicMovement.horizontalForce -= 0.01f;
        // }
    }
}

def goTo (ref player : Player, posX : i32, posY : i32)
{
    player.body.drawable.dstpos.x = posX;
    player.body.drawable.dstpos.y = posY;
}

def passRow (ref player : Player)
{    
    if (!player.isJumping)
    {
        let (x, y) = player.linearMovement.nextPosition ();
        player.speedX = x - player.body.drawable.dstpos.x;
        player.speedY = y - player.body.drawable.dstpos.y;
        player.goTo (x, y);

        player.fall ();
    }
    else
    {
        player.passRowJump ();
    }
}

def passRowJump (ref player : Player)
{
    let (x, y) = player.parabolicMovement.nextPosition ();
    let diffX = x - player.body.drawable.dstpos.x;
    let diffY = y - player.body.drawable.dstpos.y;
    
    let colManager = getCollisionManager ();
    let collided = false;
    
    // If we are going to the right...
    if (diffX > 0)
    {
        if (!colManager.canGoRight (player, diffX))
        {
            player.stopJumping ();
            collided = true;
        }
    }
    // If we are going to the left...
    else if (diffX < 0)
    {
        if (!colManager.canGoLeft (player, -diffX))
        {
            player.stopJumping ();
            collided = true;
        }
    }

    // If we are going down...
    if (diffY > 0)
    {
        if (!colManager.canGoDown (player, diffY))
        {
            player.stopJumping ();
            collided = true;
        }
    }
    // If we are going up...
    else if (diffY < 0)
    {
        if (!colManager.canGoUp (player, -diffY))
        {
            player.stopJumping ();
            collided = true;
        }
    }

    player.speedX = diffX;
    player.speedY = diffY;
    
    if (!collided)
        player.goTo (x, y);
}
