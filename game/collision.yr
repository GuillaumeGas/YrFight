mod game.collision;

import core.io;

import std.memory;
import std.list;

import common.lib.sdl;
import common.drawable;

import game.player;

struct
| background : SDL_Rect
| objects : List!(p!Drawable)
 -> CollisionManager;

enum
| Up : 0
| Down : 1
| Right : 2
| Left : 3
 -> Direction;

private
{    
    static gCollisionManagerInstance : p!CollisionManager;
    
    self ()
    {
        gCollisionManagerInstance = null;
    }

    def collidesWithSomething (colManager : p!CollisionManager, ref player : Player, speed : i32, direction : Direction) -> bool
    {
        let next_ = colManager.objects.next ();
        while (next_ !is null)
        {
            if (next_.value !is &(player.body))
            {
                if (collides (&(player.body), speed, direction, next_.value))
                    return true;
            }
            
            next_ = next (next_);
        }
        return false;
    }

    def collides (objectA : p!Drawable, speed : i32, const direction : Direction, objectB : p!Drawable) -> bool
    {
        let rectA = SDL_Rect { objectA.pos.x, objectA.pos.y, objectA.res.width, objectA.res.height };
        let rectB = SDL_Rect { objectB.pos.x, objectB.pos.y, objectB.res.width, objectB.res.height };

        match (direction)
        {
            Direction::Up => rectA.y -= speed;
            Direction::Down => rectA.y += speed;
            Direction::Right => rectA.x += speed;
            Direction::Left => rectA.x -= speed;
        }

        let left = (rectA.x + rectA.w) < rectB.x;
        let right = rectA.x > (rectB.x + rectB.w);
        let top = (rectA.y + rectA.h) < rectB.y;
        let bottom = rectA.y > (rectB.y + rectB.h);

        return !(left || right || top || bottom);
    }
}

def createCollisionManager (screenWidth : i32, screenHeight : i32) -> mut p!CollisionManager
{
    if (gCollisionManagerInstance is null)
    {
        let colManager = CollisionManager { SDL_Rect { 0, 0, screenWidth, screenHeight }, list!(p!Drawable) () };
        gCollisionManagerInstance = alloc (colManager);
        return gCollisionManagerInstance;
    }
    else
    {
        println ("You cannot create two instances of a CollisionManager !");
        assert (false);
    }
}

def getCollisionManager () -> mut p!CollisionManager
{
    if (gCollisionManagerInstance is null)
    {
        println ("The collision manager must be created by using the createCollisionManager function !");
        assert (false);
    }

    return gCollisionManagerInstance;
}

def addObject (colManager : p!CollisionManager, drawable : p!Drawable)
{
    colManager.objects.push (drawable);
}

def addObjects (colManager : p!CollisionManager, drawables : List!(p!Drawable))
{
    let next_ = drawables.next ();
    while (next_ !is null)
    {
        colManager.objects.push (next_.value);
        next_ = next (next_);
    }
}

def canGoRight (colManager : p!CollisionManager, ref player : Player, speed : i32) -> bool
{
    let background = colManager.background;
    let drawable = player.body;

    let nextPosX = drawable.pos.x + speed;
    
    if ((nextPosX + drawable.res.width) >= background.w)
        return false;
    
    return !colManager.collidesWithSomething (player, speed, Direction::Right);
}

def canGoLeft (colManager : p!CollisionManager, ref player : Player, speed : i32) -> bool
{
    let background = colManager.background;
    let drawable = player.body;

    let nextPosX = drawable.pos.x - speed;
    
    if (nextPosX <= 0)
        return false;
    
    return !colManager.collidesWithSomething (player, speed, Direction::Left);
}

def canGoDown (colManager : p!CollisionManager, ref player : Player, speed : i32) -> bool
{
    let background = colManager.background;
    let drawable = player.body;

    let nextPosY = drawable.pos.y + speed;
    
    if ((nextPosY + drawable.res.height) >= background.h)
        return false;
    
    return !colManager.collidesWithSomething (player, speed, Direction::Down);
}

def canGoUp (colManager : p!CollisionManager, ref player : Player, speed : i32) -> bool
{   
    return !colManager.collidesWithSomething (player, speed, Direction::Up);
}
