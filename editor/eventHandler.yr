mod editor.eventHandler;

import core.io;
import std.list;

import common.lib.sdl;
import common.lib.signal;

import editor.editor;

struct
| type : u32
| signal : Signal!(ref Editor)
 -> ClassicEvent;

struct
| type : u32
| keyCode : i32
| signal : Signal!(ref Editor)
 -> KeyboardEvent;

struct
| type : u32
| buttonCode : u8
| signal : Signal!(ref Editor, t!(i32, i32))
 -> MouseEvent;

struct
| signal : Signal!(ref Editor, t!(i32, i32))
 -> MouseMotionEvent;

struct
| classicEvents : List!ClassicEvent
| keyboardEvents : List!KeyboardEvent
| keyboardWithKeyRepeatEvents : List!KeyboardEvent // we must use a SDL_Scancode instead of a SDL_Keycode in this case
| mouseEvents : List!MouseEvent
| mouseMotionEvents : MouseMotionEvent
| sdlEvent : SDL_Event
| editor : p!Editor
 -> EventHandler;

def createEventHandler (ref editor : Editor) -> mut EventHandler
{
    let listClassicEvent = list!ClassicEvent ();
    let listKeyboardEvent = list!KeyboardEvent ();
    let listKeyboardWithKeyRepeatEvent = list!KeyboardEvent ();
    let listMouseEvents = list!MouseEvent ();
    let sdlEvent = SDL_Event::init;
    return EventHandler { listClassicEvent, listKeyboardEvent, listKeyboardWithKeyRepeatEvent, listMouseEvents, MouseMotionEvent::init, sdlEvent, &editor };
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, signal : Signal!(ref Editor))
{
    eventHdl.classicEvents.push (ClassicEvent { eventType, signal });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, keyCode : SDL_Keycode, signal : Signal!(ref Editor))
{
    eventHdl.keyboardEvents.push (KeyboardEvent { eventType, keyCode, signal });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, keyScanCode : SDL_Scancode, signal : Signal!(ref Editor))
{
    eventHdl.keyboardWithKeyRepeatEvents.push (KeyboardEvent { eventType, keyScanCode, signal });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, buttonCode : SDL_Mousecode, signal : Signal!(ref Editor, t!(i32, i32)))
{
    eventHdl.mouseEvents.push (MouseEvent { eventType, buttonCode, signal });
}

def onEvent (ref eventHdl : EventHandler, signal : Signal!(ref Editor, t!(i32, i32)))
{
    eventHdl.mouseMotionEvents = MouseMotionEvent { signal };
}

/* 
    SDL2 doesn't provide a SDL_EnableKeyRepeat function, that's why we handle events by this way :
        - Classic SDL_PollEvent() in order to retreive none-keyboard events (quit and mouse)
        - Then, we retrieve the keyboard state by calling SDL_GetKeyboardState, in order to determine which keys are pressed.
          We first handle keys that need to be repeated, and then the "classic" keys.
*/
def handleEvents(ref eventHdl : EventHandler)
{
    // We don't have to call it because SDL_PollEvent must call it itself
    // SDL_PumpEvents();

    let sdlEventPtr = &(eventHdl.sdlEvent);
    let pollEvent = SDL_PollEvent (sdlEventPtr);
    
    // Then we handle keyboard events with keys that need to be repeated
    let states = SDL_GetKeyboardState(null);
    let handledKeyRepeat = eventHdl.handleKeyboardWithKeyRepeatEvent (sdlEventPtr.type, states);

    // We first handle non-keyrepeat and non-keyboard events
    if (pollEvent != 0)
    {
        match (sdlEventPtr.type)
        {
            SDL_EventType::QUIT => {
                eventHdl.handleClassicEvent (sdlEventPtr.type);
            }
            SDL_EventType::MOUSEBUTTONUP | SDL_EventType::MOUSEBUTTONDOWN => {
                let mouseEvent = cast!(p!SDL_MouseButtonEvent) (sdlEventPtr);
                eventHdl.handleMouseEvent (sdlEventPtr.type, mouseEvent.button, (mouseEvent.x, mouseEvent.y));
            }
            SDL_EventType::KEYDOWN | SDL_EventType::KEYUP => {
                let keyCode = cast!(p!SDL_KeyboardEvent) (sdlEventPtr);
                eventHdl.handleKeyboardEvent (sdlEventPtr.type, keyCode.sym);                
            }
            SDL_EventType::MOUSEMOTION => {
                let mouseEvent = cast!(p!SDL_MouseButtonEvent) (sdlEventPtr);
                eventHdl.handleMouseMotionEvent ((mouseEvent.x, mouseEvent.y));
            }
        }
    }
}

def handleClassicEvent (ref eventHdl : EventHandler, eventType : u32)
{
    let next_ = eventHdl.classicEvents.next ();
    while (next_ !is null)
    {
        if (next_.value.type == eventType)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
        }
        next_ = next(next_);
    }
}

def handleKeyboardEvent (ref eventHdl : EventHandler, eventType : u32, keyCode : i32) -> bool
{
    let res = false;
    let next_ = eventHdl.keyboardEvents.next();
    while (next_ !is null)
    {
        if (next_.value.type == eventType && next_.value.keyCode == keyCode)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
            res = true;
        }
        next_ = next(next_);
    }
    return res;
}

// Returns true if an keyboard event was handled
def handleKeyboardWithKeyRepeatEvent (ref eventHdl : EventHandler, eventType : u32, const keyboardState : p!u8) -> bool
{
    let next_ = eventHdl.keyboardWithKeyRepeatEvents.next();
    let ret = false;
    while (next_ !is null)
    {
        if (*(keyboardState + (next_.value.keyCode)) == 1ub)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
            ret = true;
        }
        next_ = next(next_);
    }
    return ret;
}

def handleMouseEvent (ref eventHdl : EventHandler, eventType : u32, buttonCode : u8, pos : t!(i32, i32))
{
    let next_ = eventHdl.mouseEvents.next();
    while (next_ !is null)
    {
        if (next_.value.type == eventType && next_.value.buttonCode == buttonCode)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor), pos);
        }
        next_ = next(next_);
    }    
}

def handleMouseMotionEvent (ref eventHdl : EventHandler, pos : t!(i32, i32))
{
    let sig = eventHdl.mouseMotionEvents.signal;
    sig.call (*(eventHdl.editor), pos);
}
