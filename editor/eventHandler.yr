mod editor.eventHandler;

import core.io;
import std.list;

import common.lib.sdl;
import common.lib.signal;

import editor.editor;

struct
| type : u32
| signal : Signal!(ref Editor)
| disabled : bool
 -> ClassicEvent;

struct
| type : u32
| keyCode : i32
| signal : Signal!(ref Editor)
| disabled : bool
 -> KeyboardEvent;

struct
| signal : Signal!(ref Editor, string)
| disabled : bool
 -> KeyboardTextEvent;

struct
| signal : Signal!(ref Editor, SDL_TextEditingEvent)
| disabled : bool
 -> KeyboardTextEditEvent;

struct
| type : u32
| buttonCode : u8
| signal : Signal!(ref Editor, (i32, i32))
| disabled : bool
 -> MouseEvent;

struct
| signal : Signal!(ref Editor, (i32, i32))
| disabled : bool
 -> MouseMotionEvent;

struct
| classicEvents : List!ClassicEvent
| keyboardEvents : List!KeyboardEvent
| keyboardTextEvents : List!KeyboardTextEvent
| keyboardTextEditEvents : List!KeyboardTextEditEvent
| keyboardWithKeyRepeatEvents : List!KeyboardEvent // we must use a SDL_Scancode instead of a SDL_Keycode in this case
| mouseEvents : List!MouseEvent
| mouseMotionEvents : MouseMotionEvent
| sdlEvent : SDL_Event
| editor : p!Editor
 -> EventHandler;

self(){
    SDL_StopTextInput();
}

def createEventHandler (ref editor : Editor) -> mut EventHandler
{
    let listClassicEvent = list!ClassicEvent ();
    let listKeyboardEvent = list!KeyboardEvent ();
    let listKeyboardTextEvent = list!KeyboardTextEvent ();
    let listKeyboardTextEditEvent = list!KeyboardTextEditEvent ();
    let listKeyboardWithKeyRepeatEvent = list!KeyboardEvent ();
    let listMouseEvents = list!MouseEvent ();
    let sdlEvent = SDL_Event::init;
    return EventHandler { listClassicEvent, listKeyboardEvent, listKeyboardTextEvent, listKeyboardTextEditEvent, listKeyboardWithKeyRepeatEvent, listMouseEvents, MouseMotionEvent::init, sdlEvent, &editor };
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, signal : Signal!(ref Editor))
{
    eventHdl.classicEvents.push (ClassicEvent { eventType, signal, false });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, keyCode : SDL_Keycode, signal : Signal!(ref Editor))
{
    eventHdl.keyboardEvents.push (KeyboardEvent { eventType, keyCode, signal, false });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, keyScanCode : SDL_Scancode, signal : Signal!(ref Editor))
{
    eventHdl.keyboardWithKeyRepeatEvents.push (KeyboardEvent { eventType, keyScanCode, signal, false });
}

def onEvent (ref eventHdl : EventHandler, eventType : SDL_EventType, buttonCode : SDL_Mousecode, signal : Signal!(ref Editor, (i32, i32)))
{
    eventHdl.mouseEvents.push (MouseEvent { eventType, buttonCode, signal, false });
}

def onEvent (ref eventHdl : EventHandler, signal : Signal!(ref Editor, (i32, i32)))
{
    eventHdl.mouseMotionEvents = MouseMotionEvent { signal, false };
}

def onEvent (ref eventHdl : EventHandler, signal : Signal!(ref Editor, string))
{
    eventHdl.keyboardTextEvents.push (KeyboardTextEvent { signal, false });
}

def onEvent (ref eventHdl : EventHandler, signal : Signal!(ref Editor, SDL_TextEditingEvent))
{
    eventHdl.keyboardTextEditEvents.push (KeyboardTextEditEvent { signal, false });
}

def isEvent (T) () 
    return is (T : ClassicEvent) || is (T : KeyboardEvent) || is (T : MouseEvent) || is (T : MouseMotionEvent) ||
    is (T : KeyboardTextEvent) || is (T : KeyboardTextEditEvent);

def setDisableEvent if (isEvent!T) (T) (ref event : T, state : bool){
    event.disabled = state;
}


/* 
    SDL2 doesn't provide a SDL_EnableKeyRepeat function, that's why we handle events by this way :
        - Classic SDL_PollEvent() in order to retreive none-keyboard events (quit and mouse)
        - Then, we retrieve the keyboard state by calling SDL_GetKeyboardState, in order to determine which keys are pressed.
          We first handle keys that need to be repeated, and then the "classic" keys.
*/
def handleEvents(ref eventHdl : EventHandler)
{
    // We don't have to call it because SDL_PollEvent must call it itself
    // SDL_PumpEvents();

    let sdlEventPtr = &(eventHdl.sdlEvent);
    let pollEvent = SDL_PollEvent (sdlEventPtr);
    
    // Then we handle keyboard events with keys that need to be repeated
    let states = SDL_GetKeyboardState(null);
    let handledKeyRepeat = eventHdl.handleKeyboardWithKeyRepeatEvent (sdlEventPtr.type, states);

    // We first handle non-keyrepeat and non-keyboard events
    if (pollEvent != 0)
    {
        match (sdlEventPtr.type)
        {
            SDL_EventType::TEXTINPUT => {
                if(SDL_IsTextInputActive()){
                    let evt = cast!(p!SDL_TextInputEvent) (sdlEventPtr);
                    eventHdl.handleKeyboardTextEvent (evt.text);
                }
            }
            SDL_EventType::TEXTEDITING => {
                if(SDL_IsTextInputActive()){
                    let evt = cast!(p!SDL_TextEditingEvent) (sdlEventPtr);
                    eventHdl.handleKeyboardTextEditEvent (*evt);
                }
            }
            SDL_EventType::QUIT => {
                eventHdl.handleClassicEvent (sdlEventPtr.type);
            }
            SDL_EventType::MOUSEBUTTONUP | SDL_EventType::MOUSEBUTTONDOWN => {
                let mouseEvent = cast!(p!SDL_MouseButtonEvent) (sdlEventPtr);
                eventHdl.handleMouseEvent (sdlEventPtr.type, mouseEvent.button, (mouseEvent.x, mouseEvent.y));
            }
            SDL_EventType::KEYDOWN | SDL_EventType::KEYUP => {
                let keyCode = cast!(p!SDL_KeyboardEvent) (sdlEventPtr);
                eventHdl.handleKeyboardEvent (sdlEventPtr.type, keyCode.sym);                
            }
            SDL_EventType::MOUSEMOTION => {
                let mouseEvent = cast!(p!SDL_MouseButtonEvent) (sdlEventPtr);
                eventHdl.handleMouseMotionEvent ((mouseEvent.x, mouseEvent.y));
            }
        }
    }
}

def handleClassicEvent (ref eventHdl : EventHandler, eventType : u32)
{
    let next_ = eventHdl.classicEvents.next ();
    while (next_ !is null)
    {
        if (next_.value.type == eventType && !next_.value.disabled)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
        }
        next_ = next(next_);
    }
}

def handleKeyboardTextEvent (ref eventHdl : EventHandler, text : [char ; 32U])
{
    let val = "";
    for c in text{
        if(c == '\0')
            break;
        else
            val ~= cast!string([c]);
    }
    let next_ = eventHdl.keyboardTextEvents.next ();
    while (next_ !is null)
    {
        if(!next_.value.disabled){
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor), val);
        }
        next_ = next(next_);
    }
}


def handleKeyboardTextEditEvent (ref eventHdl : EventHandler, evt : SDL_TextEditingEvent)
{
    let next_ = eventHdl.keyboardTextEditEvents.next ();
    while (next_ !is null)
    {
        if(!next_.value.disabled){
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor), evt);
        }
        next_ = next(next_);
    }
}


def handleKeyboardEvent (ref eventHdl : EventHandler, eventType : u32, keyCode : i32) -> bool
{
    let res = false;
    let next_ = eventHdl.keyboardEvents.next();
    while (next_ !is null)
    {
        if (next_.value.type == eventType && next_.value.keyCode == keyCode  && !next_.value.disabled)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
            res = true;
        }
        next_ = next(next_);
    }
    return res;
}

// Returns true if an keyboard event was handled
def handleKeyboardWithKeyRepeatEvent (ref eventHdl : EventHandler, eventType : u32, const keyboardState : p!u8) -> bool
{
    let next_ = eventHdl.keyboardWithKeyRepeatEvents.next();
    let ret = false;
    while (next_ !is null)
    {
        if (*(keyboardState + (next_.value.keyCode)) == 1ub  && !next_.value.disabled)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor));
            ret = true;
        }
        next_ = next(next_);
    }
    return ret;
}

def handleMouseEvent (ref eventHdl : EventHandler, eventType : u32, buttonCode : u8, pos : (i32, i32))
{
    let next_ = eventHdl.mouseEvents.next();
    while (next_ !is null)
    {
        if (next_.value.type == eventType && next_.value.buttonCode == buttonCode && !next_.value.disabled)
        {
            let sig = next_.value.signal;
            sig.call (*(eventHdl.editor), pos);
        }
        next_ = next(next_);
    }    
}

def handleMouseMotionEvent (ref eventHdl : EventHandler, pos : (i32, i32))
{
    if(!eventHdl.mouseMotionEvents.disabled)
    {
        let sig = eventHdl.mouseMotionEvents.signal;
        sig.call (*(eventHdl.editor), pos);
    }
}
