mod editor.editor;

import core.io;
import std.list;
import std.map;
import std.conv;

import common.screen;
import common.lib.signal;
import common.lib.sdl;
import common.resource;
import editor.eventHandler;
import common.drawable;
import common.sprite.spritesheet;
import common.sprite.sprite;
import common.lib.parser.parser;
import common.lib.jsonWriter;

struct
| screen : Screen
| eventHdl : EventHandler
| continue : bool
| selection : SDL_Rect
| mouse : SDL_Point
| currentSelectedPos : bool
| drawable : Drawable
| spritesheet : SpriteSheet
 -> Editor;

cte gWindowWidth = 640;
cte gWindowHeight = 480;
cte gWindowPosX = 2024;
cte gWindowPosY = 100;
cte gTitle = "YrFight Editor";

def createEditor (ref editor : Editor, width : u32, height : u32) 
{
    editor.screen = createScreen (gTitle, cast!i32 (width), cast!i32 (height), gWindowPosX, gWindowPosY);
    editor.eventHdl = createEventHandler (editor);
    initEvents (editor.eventHdl);
}

def createEditor (ref editor : Editor, filepath : string)
{
    editor.createEditor (cast!u32 (gWindowWidth), cast!u32 (gWindowHeight));
    editor.spritesheet = tryLoadJson(filepath);
    editor.spritesheet.loadResource(editor.screen.renderer);
    //we must resize the window to the size of the sprite or the max size of the screen
    editor.drawable = Drawable { SDL_Rect { 0, 0, 0, 0 }, SDL_Rect {0, 0, 0, 0} , getResourcesManager().getResource(filepath) };
    editor.screen.addDrawable(&(editor.drawable));
    editor.continue = true;
}

def start (ref editor : Editor)
{
    on exit => editor.screen.destroy ();
    while (editor.continue)
    {
        editor.screen.clear ();
        editor.eventHdl.handleEvents ();
        editor.screen.draw();
        editor.drawSelection();
        editor.drawMouse();
        editor.screen.display ();
    }
}

def initEvents (ref eventHdl : EventHandler)
{
    let quitSignal = Signal!(ref Editor)::init;
    quitSignal.connect (onQuit);

    let mouseMotionSignal = Signal!(ref Editor, (i32, i32))::init;
    mouseMotionSignal.connect (onMouseMotion);

    let mouseClickSignal = Signal!(ref Editor, (i32, i32))::init;
    mouseClickSignal.connect (onMouseClick);

    let cancelSignal = Signal!(ref Editor)::init;
    cancelSignal.connect (onCancel);
    
    let zoomInSignal = Signal!(ref Editor)::init;
    zoomInSignal.connect (onZoomIn);
    let zoomOutSignal = Signal!(ref Editor)::init;
    zoomOutSignal.connect (onZoomOut);

     let saveSignal = Signal!(ref Editor)::init;
    saveSignal.connect (onSave);    

    eventHdl.onEvent (SDL_EventType::QUIT, quitSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_ESCAPE, cancelSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_UP, zoomInSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_DOWN, zoomOutSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_s, saveSignal);
    eventHdl.onEvent (mouseMotionSignal);
    eventHdl.onEvent (SDL_EventType::MOUSEBUTTONUP, SDL_Mousecode::SDL_BUTTON_LEFT, mouseClickSignal);
}

def onQuit (ref editor : Editor)
{
    editor.continue = false;
    println ("Bye !");
}

def onMouseMotion (ref editor : Editor, pos : (i32, i32))
{
    let (x, y) = pos;
    x = editor.getUnZoomValue(x);
    y = editor.getUnZoomValue(y);
    if(x != editor.mouse.x || y != editor.mouse.y){
        editor.mouse.x = x;
        editor.mouse.y = y;
        if(editor.currentSelectedPos && x > editor.selection.x && y > editor.selection.y)
        {
            editor.selection.w = x-editor.selection.x;
            editor.selection.h = y-editor.selection.y;
        }
    }
}

def onMouseClick (ref editor : Editor, pos : (i32, i32))
{
    let (x, y) = pos;
    x = editor.getUnZoomValue(x);
    y = editor.getUnZoomValue(y);
    // if nothing is selected
    if(!editor.currentSelectedPos){
        editor.selection.x = x;
        editor.selection.y = y;
        editor.selection.w = 0;
        editor.selection.h = 0;
        editor.currentSelectedPos = true;
    }else if(x > editor.selection.x && y > editor.selection.y){// we add a new SpriteItem to the Sprite and we reset the selection
        editor.currentSelectedPos = false;
        let sprite = Sprite::init;
        sprite.position.x = editor.selection.x;
        sprite.position.y = editor.selection.y;
        sprite.position.w = x-editor.selection.x;
        sprite.position.h = y-editor.selection.y;
        sprite.name = to!string(editor.spritesheet.sprites.len);
        editor.spritesheet.addSprite(sprite);
        println("Rect ", sprite.position.x, ", ", sprite.position.y, ", ", x, ", ", y);
    }
}

def drawSelection(ref editor : Editor){
    SDL_SetRenderDrawColor(editor.screen.renderer, cast!u8(237), cast!u8(28), cast!u8(36) , cast!u8(255));
    for key, value in editor.spritesheet.sprites {
        let tmpVal = value;
        tmpVal.position.x = editor.getZoomValue(value.position.x);
        tmpVal.position.y = editor.getZoomValue(value.position.y);
        tmpVal.position.w = editor.getZoomValue(value.position.w);
        tmpVal.position.h = editor.getZoomValue(value.position.h);
        editor.drawRect(tmpVal.position);
    }
    if(editor.currentSelectedPos){
        let tmpVal = editor.selection;
        tmpVal.x = editor.getZoomValue(tmpVal.x);
        tmpVal.y = editor.getZoomValue(tmpVal.y);
        tmpVal.w = editor.getZoomValue(tmpVal.w);
        tmpVal.h = editor.getZoomValue(tmpVal.h);
        editor.drawRect(tmpVal); 
    }  
}

def drawRect(ref editor : Editor, pos : SDL_Rect){
    for i in 0 .. 4
    {
        let tmp = pos;
        if(i == 0){
            tmp.h = cast!i32(editor.screen.zoom);
        }
        else if(i == 1){
            tmp.x = tmp.x + tmp.w - cast!i32(editor.screen.zoom);
            tmp.w = cast!i32(editor.screen.zoom);
        }
        else if(i == 2){
            tmp.y = tmp.y + tmp.h - cast!i32(editor.screen.zoom);
            tmp.h = cast!i32(editor.screen.zoom);
        }
        else if(i == 3){
            tmp.w = cast!i32(editor.screen.zoom);
        }
        SDL_RenderFillRect(editor.screen.renderer, &tmp);
    }
}

def drawMouse(ref editor : Editor){
    let pos = SDL_Rect::init;
    pos.x = editor.getZoomValue(editor.mouse.x);
    pos.y = editor.getZoomValue(editor.mouse.y);
    pos.w = cast!i32(editor.screen.zoom);
    pos.h = cast!i32(editor.screen.zoom);
    SDL_RenderFillRect(editor.screen.renderer, &(pos)); 
}

def onCancel(ref editor : Editor){
    if(editor.currentSelectedPos)
        editor.currentSelectedPos = false;
}

def onZoomIn(ref editor : Editor){
    editor.screen.zoomIn();
}

def onZoomOut(ref editor : Editor){
    editor.screen.zoomOut();
}

def onSave(ref editor : Editor){
    let json = editor.spritesheet.toJson();
    if(writeJson(json, editor.spritesheet.filepath ~ ".json") == RetCode::Success)
        println("Sauvegarde effectuÃ©e");
}

def getZoomRoundPos(ref editor : Editor, val : i32, alreadyZoom : bool) -> i32
{
    if(alreadyZoom)
        return editor.getZoomValue(editor.getUnZoomValue(val));
    return editor.getZoomValue(val);
}

def getUnZoomValue(ref editor : Editor, val : i32) -> i32
{
    return cast!i32(val/editor.screen.zoom);
}

def getZoomValue(ref editor : Editor, val : i32) -> i32
{
    return cast!i32(val * editor.screen.zoom);
}
