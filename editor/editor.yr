mod editor.editor;

import core.io;

import common.screen;
import common.lib.signal;
import common.lib.sdl;
import common.resource;
import editor.eventHandler;

struct
| screen : Screen
| eventHdl : EventHandler
| continue : bool
 -> Editor;

// for now...
cte gWindowWidth = 640;
cte gWindowHeight = 480;
cte gWindowPosX = 2024;
cte gWindowPosY = 100;
cte gTitle = "YrFight Editor";

def createEditor (ref editor : Editor, width : u32, height : u32, resFilePath : string) 
{
    editor.screen = createScreen (gTitle, cast!i32 (width), cast!i32 (height), gWindowPosX, gWindowPosY);
    editor.eventHdl = createEventHandler (editor);
    editor.continue = true;

    initEvents (editor.eventHdl);
}

def createEditor (ref editor : Editor, filePath : string)
{
    // read map...
    // createEditor (...
}

def start (ref editor : Editor)
{
    let screen = editor.screen;

    on exit => screen.destroy ();

    while (editor.continue)
    {
        screen.clear ();

        editor.eventHdl.handleEvents ();

        screen.display ();
    }
}

def initEvents (ref eventHdl : EventHandler)
{
    let quitSignal = Signal!(ref Editor)::init;
    quitSignal.connect (onQuit);

    let mouseMotionSignal = Signal!(ref Editor, t!(i32, i32))::init;
    mouseMotionSignal.connect (onMouseMotion);
    
    eventHdl.onEvent (SDL_EventType::QUIT, quitSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_ESCAPE, quitSignal);
    eventHdl.onEvent (mouseMotionSignal);
}

def onQuit (ref editor : Editor)
{
    editor.continue = false;
    println ("Bye !");
}

def onMouseMotion (ref editor : Editor, pos : t!(i32, i32))
{
    let (x, y) = pos;
    println("test ", x, ", ", y);
}
