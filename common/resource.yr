mod common.resource;

extern (C) printf (const c : p!char, ...);

import std.map;
import std.memory;

import core.io;
import core.string;

import common.lib.sdl;
import common.lib.sdlImage;
import common.screen;

struct
| texture : p!SDL_Texture
| width : i32
| height : i32
| file : string
 -> Resource;

private
{
    struct
    | resourceList : BTreeMap!(string,Resource)
     -> ResourcesManager;


    def printSdlErr (const message : string)
    {
        print (message, " : ");
        printf ("%s".ptr, SDL_GetError());
    }

    static gResourcesManagerInstance : p!ResourcesManager; 
    
    // static constructor
    self ()
    {
        gResourcesManagerInstance = null;
    }

    def createResourcesManager () -> p!ResourcesManager
    {
        if (gResourcesManagerInstance is null)
        {
            gResourcesManagerInstance = alloc (ResourcesManager::init);
            return gResourcesManagerInstance;
        }
        else
        {
            println ("You cannot have two instances of a ResourcesManager !");
            assert (false);
        }  
    }
}

def getResourcesManager () -> p!ResourcesManager
{
    if (gResourcesManagerInstance is null)
    {
       createResourcesManager();
    }
    return gResourcesManagerInstance;
}

def addResource(ref manager : p!ResourcesManager, path : string, renderer : p!SDL_Renderer)
{
    println(path);
    let surface = IMG_Load (path.ptr);
    if(surface is null){
        println ("Surface loading error");
    }else{
        let texture = SDL_CreateTextureFromSurface (renderer, surface);
        if( texture is null){
            println("Invalid Texture");
        }else{
            let res = Resource::init;
            res.texture = texture;
            res.file = path;
            if (SDL_QueryTexture (res.texture, null, null, &res.width, &res.height) < 0)
            {
                printSdlErr ("SDL_QueryTexture error");
                assert (false);
            }else{
                manager.resourceList.insert(path, res);
            }
        }
        SDL_FreeSurface (surface);        
    }
}

def getResource (resManager : const p!ResourcesManager, path : string) -> p!Resource
{
    return (path in resManager.resourceList);    
}
