mod common.lib.jsonWriter;

import std.json;
import std.map;
import std.vec;

import common.lib.file;

enum
| Success : 0
| CannotOpenFile : 1
| CannotCloseFile : 2
| WritingError : 3
| InvalidJsonType : 4
-> RetCode;

def writeJson (jsonValue : JsonValue, filePath : string) -> RetCode
{
    let file = File::init;

    if (!file.open (filePath, "w"))
        return RetCode::CannotOpenFile;

    let res = file.write (jsonValue);
    
    if (!file.close ())
        return RetCode::CannotCloseFile;

    return res;
}

def write (ref file : File, jsonValue : JsonValue) -> RetCode
{
    return file.write(jsonValue,0, false);
}

def write (ref file : File, jsonValue : JsonValue, const offset : i32, const fromKey : bool) -> RetCode
{
    let ret = RetCode::Success;
    match (jsonValue.type)
    {
        JSON_TYPE::OBJECT => ret = file.writeObject (jsonValue.obj, offset, fromKey);
        JSON_TYPE::ARRAY => ret = file.writeArray (jsonValue.array, offset, fromKey);
        JSON_TYPE::STRING => ret = file.writeString (jsonValue.str);
        JSON_TYPE::INT => ret = file.writeInt (jsonValue.int);
        JSON_TYPE::FLOAT => ret = file.writeFloat (jsonValue.float);
        _ => ret = RetCode::InvalidJsonType;
    }
    
    if (ret != RetCode::Success)
        return ret;
    return ret;
}

def writeObject (ref file : File, obj : BTreeMap!(string, JsonValue), const offset : i32, const fromKey : bool) -> RetCode
{
    if(!fromKey && offset != 0){
        if (fprintf (file.handle, getOffset(offset).ptr) < 0)
            return RetCode::WritingError;
    }
    if (fprintf (file.handle, "{".ptr) < 0)
            return RetCode::WritingError;
    let count = 0;
    let size = obj.len;
    if(size > 0){
        if (fprintf (file.handle, "\n".ptr) < 0)
            return RetCode::WritingError;
        for key, value in obj
        {
            if(count != 0){
                if (fprintf (file.handle, ",\n".ptr) < 0)
                    return RetCode::WritingError;
            }
            if (fprintf (file.handle, getOffset(offset+1).ptr) < 0)
                    return RetCode::WritingError;
            if (fprintf (file.handle, "\"%s\" : ".ptr, key.ptr) < 0)
                return RetCode::WritingError;
            let lineSize = cast!i32((key ~ " : ").len)+2;// we count also the '"'
            let ret = file.write (value, offset+lineSize+1, true);
            if (ret != RetCode::Success)
                return ret;
            count++;

        }
        if (fprintf (file.handle, ("\n"~getOffset(offset)).ptr) < 0)
            return RetCode::WritingError;
    }
    if (fprintf (file.handle, "}".ptr) < 0)
            return RetCode::WritingError;
    
    return RetCode::Success;
}

def writeArray (ref file : File, array : Vector!(JsonValue), const offset : i32, const fromKey : bool) -> RetCode
{
    if(!fromKey && offset != 0){
        if (fprintf (file.handle, getOffset(offset).ptr) < 0)
            return RetCode::WritingError;
    }
    if (fprintf (file.handle, "[".ptr) < 0)
        return RetCode::WritingError;    
    if(array.len > 0){
        if (fprintf (file.handle, "\n".ptr) < 0)
            return RetCode::WritingError;
        for i in 0U .. array.len
        {
            if(i != 0){
                if (fprintf (file.handle, ",\n".ptr) < 0)
                    return RetCode::WritingError;
            }
            file.write (array[i], offset+1, false); 
        }
        if (fprintf (file.handle, ("\n"~getOffset(offset)).ptr) < 0)
            return RetCode::WritingError;
    }
    
    if (fprintf (file.handle, "]".ptr) < 0)
        return RetCode::WritingError;
    
    return RetCode::Success;
}

def writeString (ref file : File, str : string) -> RetCode
{
    if (fprintf (file.handle, "\"%s\"".ptr, str.ptr) < 0)
        return RetCode::WritingError;
    
    return RetCode::Success;
}

def writeInt (ref file : File, value : i64) -> RetCode
{
    if (fprintf (file.handle, "%i".ptr, value) < 0)
        return RetCode::WritingError;
    
    return RetCode::Success;
}

def writeFloat (ref file : File, value : f64) -> RetCode
{
    if (fprintf (file.handle, "%i".ptr, value) < 0)
        return RetCode::WritingError;
    
    return RetCode::Success;
}


def getOffset(const offset : i32) -> string{
    let val = string::init;
    for i in 0 .. offset
        val ~= " ";
    return val;
}
