mod common.lib.file;

import core.io;
import std.outbuffer;
import std.conv;
import std.traits;

extern (C) fopen (const path : p!char, const mode : p!char) -> p!i32;
extern (C) fclose (file : p!i32) -> i32;
extern (C) fgetc (file : p!i32) -> i32;
extern (C) fgets (buf : p!char, n : i32, file : p!i32) -> p!char;
extern (C) feof (file : p!i32) -> i32;

struct
| handle : p!i32
 -> File;

cte Eof = -1;

def open (ref file : File, filePath : const string, mode : const string) -> bool
{
    file.handle = fopen (filePath.ptr, mode.ptr);
    
    if (file.handle is null)
        return false;
    return true;
}

def close (ref file : File) -> bool
{
    if (file.handle is null)
        return false;
    return fclose (file.handle) == 0;
}

def readChar (ref file : File) -> mut char
{
    return cast!char (fgetc (file.handle));
}

def read if (isIntegral!T) (T) (ref file : File) -> mut T
{
    let strValue = file.readString ();
    return to!T (strValue);
}

def readString (ref file : File) -> mut string
{
    let outbuf = OutBuffer ();
    let c = file.readChar ();
    while (c != ' ' && c != '\0' && c != cast!char (Eof) && c != '\n')
    {
        if (c != ' ' && c != '\0' && c != cast!char (Eof) && c != '\n')
        {
            outbuf.write (c);
            c = file.readChar ();
        }
    }
    return to!string (outbuf);
}

def isEof (ref file : File) -> bool
{
    return feof (file.handle) == 1;
}

/*

// Example :

def main()
{
    let file = File::init;
    if (!file.open ("test.txt", "r"))
    {
        println ("File open error");
        assert (false);
    }

    // let str = file.readString ();
    // println (str);

    let a = file.readInt ();
    println (a);
    
    on exit => {
        if (!file.close ())
            println ("File close error");
    }
}


*/
