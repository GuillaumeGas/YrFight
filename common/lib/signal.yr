mod common.lib.signal;

struct (T...)
| func : [fn (T) -> void]
 -> Signal;

def connect (T...) (ref sig : Signal!T, foo : fn (T) -> void) {
    sig.func = sig.func ~ [foo];
}

def call (T...) (ref sig : Signal!T, elems : T) {
    for it in 0U .. sig.func.len {
        sig.func [it] (elems.expand);
    }
}
