mod common.sprite.spriteitem;

import common.lib.sdl;
import std.list;
import std.json;
import std.map;

struct
| name : string
| position : SDL_Rect
| hitboxes : List!SDL_Rect
 -> SpriteItem;

// SpriteItem
def addHitbox(ref spriteItm : SpriteItem, rect : SDL_Rect){
    spriteItm.hitboxes.push(rect);
}

def removeHitbox(ref spriteItm : SpriteItem, rect : SDL_Rect){
}

def loadFromJsonString(json : string) -> SpriteItem{
    return SpriteItem::init;
}

def fromJson(json : JsonValue) -> SpriteItem{
    let spriteItm = SpriteItem::init;
    if(json.type == JSON_TYPE::OBJECT){
        let name = ("name" in json.obj);
        if(name !is null)
            spriteItm.name = name.str;
        let position = ("position" in json.obj);
        if(position !is null)
            spriteItm.position.fromJson(*position);
    }
    return spriteItm;
}

def fromJson(ref rect : SDL_Rect, json : JsonValue){
    if(json.type == JSON_TYPE::OBJECT){
        let x = ("x" in json.obj);
        if(x !is null)
            rect.x = cast!i32(x.int);
        let y = ("y" in json.obj);
        if(y !is null)
            rect.y = cast!i32(y.int);
        let w = ("w" in json.obj);
        if(w !is null)
            rect.w = cast!i32(w.int);
        let h = ("h" in json.obj);
        if(h !is null)
            rect.h = cast!i32(h.int);        
    }
}

def toJson(ref spriteItm : SpriteItem) -> JsonValue
{
    let json = JsonValue::init;
    json.type = JSON_TYPE::OBJECT;
    
    let name = JsonValue::init;
    name.type = JSON_TYPE::STRING;
    name.str = spriteItm.name;
    json.obj.insert("name", name);
    
    json.obj.insert("position", spriteItm.position.toJson());
    
    return json;
}

def toJson(ref rect : SDL_Rect) -> JsonValue
{
    let json = JsonValue::init;
    json.type = JSON_TYPE::OBJECT;

    let x = JsonValue::init;
    x.type = JSON_TYPE::INT;
    x.int = rect.x;
    json.obj.insert("x", x);

    let y = JsonValue::init;
    y.type = JSON_TYPE::INT;
    y.int = rect.y;
    json.obj.insert("y", y);

    let w = JsonValue::init;
    w.type = JSON_TYPE::INT;
    w.int = rect.w;
    json.obj.insert("w", w);

    let h = JsonValue::init;
    h.type = JSON_TYPE::INT;
    h.int = rect.h;
    json.obj.insert("h", h);

    return json;
}
